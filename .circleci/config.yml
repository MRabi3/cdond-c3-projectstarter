version: 2.1

commands:
  destroy-environment:
    description: Destroy frontend and backendcloudformation stacks as well as delete s3 bucket files
    steps:
      - run:
          name: Install AWS CLI
          when: on_fail
          command: |
            if ! [ -x "$(command -v aws)" ]; then
            pip install awscli
            else
            echo "AWS CLI already installed"
            fi
      - run:
          name: Remove S3 files
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} \
            --recursive
      - run:
          name: Delete S3 bucket
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} \
            --force
      - run:
          name: Delete frontend stack
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Delete backend stack
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow. 
    steps:
      - run:
          name: Revert database migrations
          command: |
            migrationSuccess=$(curl https://kvdb.io/FsGnCAbkTAfD27QTDD1KgX/migration_${CIRCLE_WORKFLOW_ID:0:7})          
            if [[ $migrationSuccess==1 ]]
            then
              cd /home/circleci/project/backend
              npm install
              npm run migrations:revert
            fi
          when: on_fail            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: "frontend-build"
      - run: npm i    
      - run:
          name: Build front-end
          command: |
            cd frontend 
            npm install 
            npm run build
      - save_cache:
          paths: "frontend/node_modules"
          key: "frontend-build"

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: "backend-build"
      - run:
          name: Back-end build
          command: |
            cd backend 
            npm install 
            npm run build
      - save_cache:
          paths: "backend/node_modules"
          key: "backend-build"

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: "frontend-test"
      - run:
          name: front end test
          command: |
            cd frontend 
            npm install 
            npm run test
      - save_cache:
          paths: "frontend/node_modules"
          key: "frontend-test"
            
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: "backend-test"
      - run:
          name: Back-end test
          command: |
            cd backend 
            npm install 
            npm run test
      - save_cache:
          paths: "backend/node_modules"
          key: "backend-test"

            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: "frontend-scan"
      - run:
          name: front end scan
          command: |
            cd frontend 
            npm install 
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: "frontend/node_modules"
          key: "frontend-scan"

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: "backend-scan"
      - run:
          name: Back-end scan
          command: |
            cd backend 
            npm install 
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: "backend/node_modules"
          key: "backend-scan"

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum -y install tar
            yum -y install gzip
            
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: clear inventory.txt
          command: |
            echo [web] > ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt
     
      - run:
          name: Add back-end ip to IP file
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text > ./.circleci/ansible/MyIP.txt
            cat ./.circleci/ansible/MyIP.txt

      - persist_to_workspace:
          root: .circleci/ansible/
          paths:
            - inventory.txt
            - MyIP.txt
      - destroy-environment 

  configure-infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ea:e7:73:4d:7f:f3:56:f2:e1:cd:3a:41:bf:ab:de:9e"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible
            apk add --update tar
            apk add --update gzip 
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure      
      - destroy-environment
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          key: "backend-scan"
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            touch .env
            echo NODE_ENV=$ENVIROMENT >> ./.env
            echo VERSION=$VERSION >> ./.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ./.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ./.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ./.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ./.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> ./.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> ./.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ./.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ./.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ./.env
            touch migrationStatus.txt
            npm run migrations > migrationStatus.txt
            
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/FsGnCAbkTAfD27QTDD1KgX/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - revert-migrations
      
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar 
            yum -y install gzip
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Get backend url
          command: |
            backendIP=`cat ./.circleci/ansible/MyIP.txt`
            export API_URL="http://${backendIP}:3030"
            cd ./frontend
            touch ./.env
            echo API_URL=$API_URL >> ./.env
            echo $API_URL
      - run:
          name: Deploy frontend objects
          command: |
            npm install webpack-dev-server -g
            cd ./frontend
            npm install
            npm run build
            aws s3 cp ./dist s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - revert-migrations
      - destroy-environment
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: "python:3.7-alpine3.11"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ea:e7:73:4d:7f:f3:56:f2:e1:cd:3a:41:bf:ab:de:9e"]
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar
            apk add --update gzip
            apk add --update curl
            apk add --update openssh-client
      - run:
          name: Get Current Path 
          command: |
            cd ./backend
            pwd
      - run:
          name: Set Enviroment variables 
          command: |
            cd ./backend
            pwd 
            touch .env
            echo ENVIROMENT=$ENVIROMENT >> ./.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ./.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ./.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ./.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ./.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> ./.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> ./.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ./.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ./.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ./.env
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations
      - destroy-environment


  smoke-test:
    docker:
      - image: "python:3.7-alpine3.11"
    steps:
      - checkout
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar
            apk add --update gzip
            apk add --update curl
      - run:
          name: Get Backend IP and Backend smoke test.
          command: |
            backendIP=`cat ./.circleci/ansible/MyIP.txt`
            echo $backendIP
            sleep 20
            URL="http://$backendIP:3030/api/status"
            echo $URL
            curl -s $URL
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 0
            fi
      - revert-migrations
      - destroy-environment

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar 
            yum -y install gzip
      - run:
          name: Update cloudfront stack
          command: |
            aws cloudformation list-exports \
            --query "Exports[?Name=='WorkflowID'].Value" \
            --no-paginate \
            --output text > ./.circleci/ansible/originalWorkflowID.txt
            if [ -s "./.circleci/ansible/originalWorkflowID.txt" ]
            then
              cat ./.circleci/ansible/originalWorkflowID.txt
              originalWorkflowID=`cat ./.circleci/ansible/originalWorkflowID.txt`
            else
              echo "New stack will be created"
            fi
            if [ -n "$originalWorkflowID" ]
            then
              echo $originalWorkflowID
              StackOption=update-stack
              StackName=udapeople-$originalWorkflowID
            else
              StackOption=create-stack
              StackName=udapeople-${CIRCLE_WORKFLOW_ID:0:7}
            fi
            aws cloudformation $StackOption \
            --stack-name $StackName \
            --template-body file://./.circleci/files/cloudfront.yml \
            --parameter ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags Key=Name,Value=Udapeople-production-${CIRCLE_WORKFLOW_ID:0:7}
      - persist_to_workspace:
          root: .circleci/ansible/
          paths:
            - originalWorkflowID.txt
      - revert-migrations
      - destroy-environment 

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar 
            yum -y install gzip
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Get Old Stack Workflow ID and Remove old stacks and files
          command: |
            originalWorkflowID=`cat ./.circleci/ansible/originalWorkflowID.txt`
            echo $originalWorkflowID
            if [ -n "$originalWorkflowID" ]
            then
              aws s3 rm s3://udapeople-$originalWorkflowID --recursive
              aws s3 rb s3://udapeople-$originalWorkflowID --force
              aws cloudformation delete-stack --stack-name udapeople-frontend-$originalWorkflowID
              aws cloudformation delete-stack --stack-name udapeople-backend-$originalWorkflowID
            else
              echo "No old workflow exists"
            fi 
      # - revert-migrations
      # - destroy-environment
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]